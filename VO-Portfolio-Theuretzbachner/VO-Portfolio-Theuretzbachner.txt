**VO-Portfolio 28.10.2019**

**WHOAMI**

**What type of programming experience?**

Java, C++, C\#, tiny bit of Assembler

**What have you done with micro controllers, which ones have you used?
(Like Arduino, ESP8266, Particle/Photon)**

ARM Microcontroller (MSP432P401R) during "Hardwarenahe Programmierung"
last semester

**Which single board computers do you know/have you used (Raspberry Pi,
Orange Pi, Beaglebone, Labrador)?**

very limited Raspberry Pi experience (just for fun)

**Who is a maker or part of a maker community?**

maker communities are made up of makers, they are communities that
engages with IoT devices and projects; hold meetings and conferences,
invent new stuff, share knowledge and equipment, connect and collaborate
globally, also try to educate people unfamiliar with IoT

**What do you like, would you like about it? How could it relate to this
class?**

**What do you already know about IoT? -- What are your expectations from
this class?**

usual stuff, mainly in regards to home automation (voice control, Alexa
and Google Home), smart home devices like refrigerators, washing
machines, security systems

not a user myself, very skeptical

**Definition:**

IoT refers to physical objects that feature an IP address for internet
connectivity, as well as the resulting communication network between
these objects and other Internet-enabled devices and systems

**Domains:**

security systems, thermostat, cars, home automation, health care,
commercial environments, alarm clocks, speaker systems, vending machines

**Protocols:**

[MQTT]{.underline}, a subscribe / publish protocol that runs with TCP,
which means it supports even-driven message exchange through wireless
networks

[BLE]{.underline} / Bluetooth Low-Energy protocol

[CoAP]{.underline} (Constrained Application Protocol), an internet
productivity and utility protocol, mainly for restricted smart gadgets

**Typical devices:**

Fitbit smart watch, Samsung smart refrigerator (Family Hub), 3D-Printer,
tado° smart thermostat

Smart Mobiles, Smart Refrigerators, Smart Watches, Smart Fire Alarm,
Smart Door Lock, Smart Bicycle, Medical Sensors, Fitness Trackers, Smart
Security System

**Benefits:**

Saves time, saves money, improves and speeds up communication, "live"
monitoring of data, Energy management, Resource management

**Challenges:**

Security, privacy, connectivity, compatibility, longevity

**VO-Portfolio 31.10.2019**

IoT architecture in respect to:

**Cloud:**\
Stack that allows back-end components to communicate with each other in
order to support Big Data analytics, certain interfaces and device
management; more efficient, also more cost efficient; centralized
computing\
Microsoft Azure, Google Cloud, IBM Watson

**Edge:**\
distributed computing; data is processed where it was generated, meaning
the periphery of the network as close to the originating source, which
is preferable if real time relevancy is a priority, because it is
faster; issues of latency and bandwidth

alternative names: router, gateway

**Fog:**\
"mix" of cloud and edge, direct connection between edge devices and the
cloud / the internet; name stems from reference to the expression of
"cloud" both consist of water particles, except fog is more permeable,
while a cloud is more dense

**Research on Onewire**

-   aka "1-Wire", is a communication bus system

-   made by Maxim (formerly Dallas Semiconductor Corporation)

-   low-speed data with 16.3 kbps

-   single contact, easy to use, not very complex

-   very energy-efficient and cost-efficient

-   everything derives power from signal bus (parasite mode)

-   only one master needed to control slaves

    -   1-Wire busmaster

    -   connected to sensors busmaster connects to first actor, that one
        connects to the next, etc. (multidrop, supports multiple devices
        on single line)

    -   server controls busmaster via driver and communicates with the
        sensors

    -   all software runs on server

-   master sends impulses under 15ms equals 1, over 15ms equals 0

-   **Example:** Raspberry Pi: 1-Wire Temperatursensor DS1820

-   Block diagram:

<https://www.maximintegrated.com/en/products/interface/one-wire.html>

**RS232**

-   standard for serial communication

-   connects two devices

-   connection between terminal and modem

-   has been replaced by now

-   lower transmission speed, short maximum cable length, large voltage
    swing, large standard connectors, no multipoint capability and
    limited multidrop capability

**RS485**

-   industrial standard for asynchronous serial communication

-   used in automation and industry

-   half-duplex

-   high-speed

-   max. distance 1200 meters

**I²C**

-   serial databus

-   developed by Phillips

-   five speed levels

-   10-400 kbps

-   short-distance

-   master-slave relationship

-   slaves have fixed address

-   low-active

**SPI**

-   serial peripheral interface

-   developed by Motorola

-   "loose" standard for synchronous serial data bus

-   data communication between micro controller

-   settings variable: clock edge, word length

-   short distance (1-10 meters)

-   clock frequency up to MHz-range, also variable

**VO-Portfolio 04.11.2019**

-   **Binary**

    -   **Pickle (Python):**

        -   implements binary protocols for serializing and
            de-serializing a Python object structure

        -   not human-readable

        -   interoperable and Python-specific

    -   **CBOR:**

        -   JSON-oriented

        -   high processing and broadcast-speed

        -   not human-readable

        -   saves data in key-value pairs specific way of compressing
            data into binary

        -   "short, binary JSON"

        -   very hard and expensive to debug, which outweighs the
            savings

    -   not that big, size-wise

    -   ideal for sending pictures, audio, video

    -   used for large amounts of data

-   **Text**

    -   human-readable (duh)

    -   same data might be structured differently depending on the
        source (e.g. street addresses may be different from country to
        country)

    -   not that big, size-wise

-   **XML (SOAP)**

    -   SOAP = Simple Object Access Protocol, a simple application
        communication protocol

    -   uses XML information sets for its message format

    -   sends messages via application layer protocols (mostly HTTP)

    -   is able to communicate with and invoke processes running on
        disparate operating systems, since web protocols are installed
        and running on almost all OS

    -   can be implemented in any language and can be executed in any
        platform

    -   slow, since it uses  XML format which needs to be parsed and
        tends to be longer, too

    -   lot of overheadd

    -   depends on WSDL and does not have any standardized mechanism for
        dynamic discovery of the services

    -   XML has scheming-possibility

-   **JSON**

    -   text serialization format

    -   encoded to utf-8 most of the time

    -   human-readable

    -   more tolerant and easier to write clients in JSON; doesn't
        over-specify things (e.g. date can have different formats as
        long as it can be parsed)

    -   interoperable and widely used in different ecosystems

    -   no error-handling

    -   dangerous with untrusted service or browsers JSON service
        returns response wrapped in function call, which will be
        executed by the browser

    -   if exact scheme is needed, JSON is not helpful

-   **YAML**

    -   targets many of the same communications applications as XML, but
        has more minimal syntax

    -   uses Python-style indentation to indicate nesting

    -   uses more compact format (\[ \] for lists, { } for maps)

    -   human-readable

    -   available for many programming languages

    -   if exact scheme is needed, JSON is not helpful

<!-- -->

-   Publish Subscribe Pattern pattern most used in IoT

Most common IoT-Protocols!

**HTTP POST**

**CoAP**

-   specialized web transfer protocol for use with constrained nodes and
    constrained networks

-   machine-to-machine communication (e.g. for smart energy, building
    automation)

-   designed to enable simple, constrained devices to join the IoT even
    through constrained networks with low bandwidth and low availability

-   provides a request/response interaction model between application
    endpoints

-   supports built-in discovery of services and resources

-   includes key concepts of the Web such as URIs and Internet media
    types

-   can easily interface with HTTP for integration with the Web (while
    meeting specialized requirements such as multicast support)

-   has very low overhead

-   simple for constrained environments

-   provides memory per individual node

-   used by IKEA for home automation

-   uses UDP by default (less overhead, lower latency, less reliable)

-   certain TCP advantages can be implemented to provide failsafes

**MQTT**

-   Telemetry Transport or Message Queue Telemetry Transport

-   machine-to-machine communication

-   very lightweight

-   publish-subscribe system

-   runs over TCP/IP

-   MQTT used by Arduino used in the Lab
